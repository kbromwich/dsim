{"version":3,"file":"static/js/264.d7d732e8.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","util/parseIntStrict.ts","util/parseRanges.ts","sim/Simulation.ts","util/stripComments.ts","util/stripError.ts","sim/parse.ts","worker/parse/worker.ts","util/arrays.ts","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","\nconst parseIntStrict = (value: string): number => {\n  const num = Number(value);\n  const parsedInt = parseInt(value, 10);\n  return (num === parsedInt) ? num : NaN;\n};\n\nexport default parseIntStrict;\n","import parseIntStrict from './parseIntStrict';\nimport { range } from './range';\n\nconst parsePositiveIntStrict = (value: string): number => {\n  const num = parseIntStrict(value);\n  return num >= 0 ? num : NaN;\n};\n\n/** Parse strings such as \"1-5,7,9,11-20\" into a list of (integer) values */\nexport default function parseRanges(...ranges: (string|string[])[]) {\n  const values: number[] = [];\n  ranges.flat().map((sr) => sr.split(',')).flat().forEach((rng) => {\n    if (rng.includes(\"-\")) {\n      const [minlvl, maxlvl] = rng.split('-');\n      const from = parsePositiveIntStrict(minlvl);\n      const to = parsePositiveIntStrict(maxlvl);\n      if (!Number.isNaN(from) && !Number.isNaN(to) && from <= to) {\n        values.push(...range(from, to + 1));\n      } else {\n        values.push(NaN);\n      }\n    } else {\n      values.push(parsePositiveIntStrict(rng));\n    }\n  })\n  return [...new Set(values)];\n}\n\n/** Returns undefined if any part of range input is invalid */\nexport function tryParseRanges(...ranges: (string|string[])[]) {\n  const values = parseRanges(...ranges);\n  if (values.findIndex(Number.isNaN) >= 0) {\n    return undefined;\n  }\n  return values;\n}\n","import Expression from './expressions/Expression';\nimport SimState from './SimState';\n\nexport interface SimulationSource {\n  definition: string;\n  rawExpression: string;\n  lineStart?: number;\n  lineCount?: number;\n}\n\nexport class BaseSimulation {\n  rawExpression: string;\n  rootExpression: Expression;\n\n  constructor(rawExpr: string, rootExpr: Expression) {\n    this.rawExpression = rawExpr\n    this.rootExpression = rootExpr\n  }\n\n  run(initialState: SimState) {\n    return this.rootExpression.eval(initialState)\n  }\n}\n\nexport default class Simulation extends BaseSimulation {\n  name: string;\n  level: number;\n  source: SimulationSource;\n  error?: string;\n\n  constructor(name: string, level: number, source: SimulationSource, rootExpr: Expression) {\n    super(source.rawExpression, rootExpr);\n    this.name = name;\n    this.level = level;\n    this.source = source;\n    this.error = undefined;\n  }\n  \n  id() {\n    return `${this.name}@${this.level}`;\n  }\n\n  isValid() {\n    return !this.error;\n  }\n}\n","const stripComments = (scriptLine: string) => {\n  if (scriptLine.trim().startsWith('#')) {\n    return '';\n  }\n  return scriptLine;\n}\n\nexport default stripComments;\n","const stripError = (errorMessage: string) => {\n  if (errorMessage.trim().toLowerCase().startsWith('error:')) {\n    return errorMessage.trim().slice(6).trim();\n  }\n  return errorMessage;\n}\n\nexport default stripError;\n","import parseRanges from 'util/parseRanges';\nimport Expression from './expressions/Expression';\nimport ExpressionCreator from './expressions/ExpressionCreator';\nimport { SplitExpressions } from './expressions/splitOperatorExpressions';\nimport { UnaryExpressions } from './expressions/unaryOperatorExpressions';\nimport { ValueExpressions } from './expressions/valueExpressions';\nimport SimState from './SimState';\nimport Simulation, { SimulationSource } from './Simulation';\nimport { arrayBinned } from 'util/arrays';\nimport stripComments from 'util/stripComments';\nimport stripError from 'util/stripError';\nimport { LineError, ParsedSims } from './ParsedSims';\n\nconst OperatorExpressions = [...SplitExpressions, ...UnaryExpressions];\nconst SimDefinitionRegex = /[^:#@]+@[- \\t,\\d]+:(.*)/;\n\nfunction matchAt(matches: RegExpMatchArray[], index: number): RegExpExecArray | null {\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i].index === index) {\n      return matches[i] as RegExpExecArray;\n    }\n  }\n  return null;\n}\n\nfunction appendChunk(result: string[], chunk: string, resets: number) {\n  if (resets === 1 && chunk.startsWith('(') && chunk.endsWith(')')) {\n    chunk = chunk.substring(1, chunk.length - 1);\n  }\n  result.push(chunk);\n}\n\nfunction splitExpr(\n  expr: string, operator: ExpressionCreator<any>,\n): [string[], RegExpExecArray | null, number] {\n  const matches = [...expr.matchAll(operator.globalRegex)];\n  if (!matches.length) {\n    return [[], null, 0];\n  }\n\n  const result: string[] = [];\n  let braces = 0;\n  let currentChunk = '';\n  let chunkParensResets = 0;\n  let opMatch: RegExpExecArray | null = null;\n  let i = 0;\n  while (i < expr.length) {\n    const curChar = expr[i];\n    if (curChar === '(') {\n      braces += 1;\n    } else if (curChar === ')') {\n      braces -= 1;\n      if (braces === 0) {\n        chunkParensResets += 1;\n      }\n    }\n    if (braces === 0 && !opMatch && (operator.numOperands !== 2 || i > 0)) {\n      opMatch = matchAt(matches, i);\n      if (opMatch) {\n        appendChunk(result, currentChunk, chunkParensResets);\n        currentChunk = '';\n        chunkParensResets = 0;\n        i += opMatch[0].length;\n        continue;\n      }\n    }\n    currentChunk += curChar;\n    i += 1;\n  }\n  if (braces !== 0) {\n    throw Error(`Unbalanced parentheses in expression \"${expr}\"`);\n  }\n  appendChunk(result, currentChunk, chunkParensResets);\n  return [result.filter(Boolean), opMatch, chunkParensResets];\n}\n\ntype Source = Pick<SimulationSource, 'definition' | 'lineStart' | 'lineCount'>;\n\nexport function parseSimExpr(rawExpr: string): Expression {\n  for (let exprCreator of OperatorExpressions) {\n    const [parts, opMatch, parensGroups] = splitExpr(rawExpr, exprCreator)\n    if (parts.length === 1 && parensGroups === 1 && rawExpr.startsWith('(') && rawExpr.endsWith(')')) {\n      return parseSimExpr(parts[0]);\n    }\n    if (opMatch && parts.length === exprCreator.numOperands) {\n      return exprCreator.create(rawExpr, parts.map(parseSimExpr), opMatch) as Expression;\n    }\n  }\n\n  for (let exprCreator of ValueExpressions) {\n    const match = exprCreator.regex.exec(rawExpr);\n    if (match) {\n      return exprCreator.create(rawExpr, [], match) as Expression;\n    }\n  }\n\n  throw Error(`Invalid expression: \"${rawExpr}\"`)\n}\n\nexport function parseSimDef(source: Source): Simulation[] {\n  const [nameLevel, expr] = source.definition.trim().split(/:(.*)/s);\n  if (!expr) {\n    throw new Error(`Simulation definition \"${source.definition}\" is not correctly formatted.`)\n  }\n  let levels = [0];\n  let name = nameLevel;\n  if (nameLevel.includes('@')) {\n    const [namePart, levelsPart] = name.split('@');\n    name = namePart;\n    levels = parseRanges([levelsPart]);\n  }\n  let expression: Expression<unknown>;\n  let error: string | undefined;\n  const rawExpr = expr.replace(/\\s+/g, '');\n  try {\n    expression = parseSimExpr(rawExpr);\n  } catch (e) {\n    expression = parseSimExpr('0');\n    error = String(e);\n  }\n  const simSource: SimulationSource = {\n    ...source,\n    rawExpression: rawExpr,\n  };\n  return levels.map((level) => {\n    const sim = new Simulation(name, level, simSource, expression);\n    sim.error = error;\n    return sim;\n  });\n}\n\nexport function tryParseTestSimDef(source: Source): Simulation[] {\n  const sims = parseSimDef(source);\n  sims.forEach((sim) => {\n    if (!sim.error) {\n      try {\n        // Perform a test run, to make sure it's all good!\n        sim.run(new SimState({ ac: 10, pb: 2, level: 1, sm: 0 }));\n      } catch (e) {\n        sim.error = String(e);\n      }\n    }\n  });\n  return sims;\n}\n\nexport function parseTestSimDef(source: Source): Simulation[] {\n  const sims = tryParseTestSimDef(source);\n  const firstError = sims.find((s) => s.error)?.error;\n  if (firstError) {\n    throw new Error(firstError);\n  }\n  return sims;\n}\n\nexport function parseSimDefsScript(simDefsScript: string): ParsedSims {\n  const errors: LineError[] = [];\n  const sims: Simulation[] = [];\n  const lines = simDefsScript.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const lineStart = i;\n    const line = lines[i];\n    if (!stripComments(line).trim()) {\n      continue;\n    }\n    const match = SimDefinitionRegex.exec(line);\n    if (!match) {\n      errors.push({ lineStart, message: 'Invalid name@level: definition' });\n      continue;\n    }\n\n    let simDef = line;\n    if (match[1].includes('(')) {\n      let braces = 0;\n      let j = i;\n      let innerLine = match[1];\n      do {\n        if (!line.trim()) {\n          continue;\n        }\n        if (SimDefinitionRegex.test(innerLine)) {\n          break;\n        }\n        for (let k = 0; k < innerLine.length; k++) {\n          const char = innerLine[k];\n          if (char === '(') {\n            braces += 1;\n          } else if (char === ')') {\n            braces -= 1;\n          }\n        }\n        j += 1;\n        innerLine = lines[j];\n      } while (braces > 0 && j < lines.length);\n      const extraLines = lines.slice(i + 1, j).join('\\n');\n      simDef = `${match[0].trim()}\\n${extraLines}`.trim();\n      i = j - 1;\n    }\n    const lineCount = 1 + i - lineStart;\n\n    try {\n      const parseResults = tryParseTestSimDef({ definition: simDef, lineStart, lineCount });\n      const error = parseResults.find((sim) => sim.error)?.error;\n      if (error) {\n        errors.push({ lineStart, lineCount, message: stripError(error) });\n      } else {\n        sims.push(...parseResults);\n      }\n    } catch (e) {\n      errors.push({ lineStart, lineCount, message: stripError(String(e)) });\n    }\n  }\n  const simsByName = arrayBinned(sims, (sim) => sim.name);\n  return { sims: simsByName, errors, names: Object.keys(simsByName) }\n}\n","import { parseSimDefsScript } from 'sim/parse';\n\nonmessage = function(event: MessageEvent<{ script: string }>) {\n  const script = event.data.script;\n  const parsedSims = parseSimDefsScript(script);\n  this.postMessage({ errors: parsedSims.errors });\n}\n\nexport {}\n","\nexport const arrayBinned = <T>(arr: T[], binner: (item: T) => string): Record<string, T[]> => {\n  const bins: Record<string, T[]> = {};\n  arr.forEach((item) => {\n    const bin = binner(item);\n    if (!bins[bin]) {\n      bins[bin] = [];\n    }\n    bins[bin].push(item);\n  });\n  return bins;\n};\n\nexport const arrayUnique = <T>(arr: T[], keyGetter?: (item: T) => string): T[] => {\n  if (!keyGetter) {\n    return [...new Set(arr)];\n  }\n  return [...new Map(arr.map((v) => [keyGetter(v), v])).values()];\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [91], function() { return __webpack_require__(264); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"0d06f26e\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/dsim/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t264: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkdsim\"] = self[\"webpackChunkdsim\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(91).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","num","Number","parseInt","NaN","parsePositiveIntStrict","parseIntStrict","parseRanges","values","ranges","flat","map","sr","split","rng","includes","minlvl","maxlvl","from","to","isNaN","range","Set","Simulation","name","level","rootExpr","rawExpression","error","undefined","this","rawExpr","rootExpression","initialState","eval","scriptLine","trim","startsWith","errorMessage","toLowerCase","slice","OperatorExpressions","SplitExpressions","UnaryExpressions","SimDefinitionRegex","matchAt","matches","index","appendChunk","result","chunk","resets","endsWith","substring","splitExpr","expr","operator","matchAll","globalRegex","braces","currentChunk","chunkParensResets","opMatch","curChar","numOperands","Error","Boolean","parseSimExpr","exprCreator","parts","parensGroups","create","ValueExpressions","match","regex","exec","tryParseTestSimDef","sims","definition","nameLevel","expression","levels","namePart","levelsPart","replace","e","String","simSource","sim","parseSimDef","run","SimState","ac","pb","sm","onmessage","event","parsedSims","simDefsScript","errors","lines","lineStart","line","stripComments","simDef","j","innerLine","test","k","char","extraLines","join","lineCount","parseResults","find","message","stripError","simsByName","arr","binner","bins","item","bin","arrayBinned","names","parseSimDefsScript","data","script","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","d","o","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next","then"],"sourceRoot":""}